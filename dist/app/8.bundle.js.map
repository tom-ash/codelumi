{"version":3,"file":"8.bundle.js","sources":["webpack:///./src/app/components/announcement/components/index/components/list/list.js"],"sourcesContent":["import React from 'react'\nimport { connect } from 'react-redux'\nimport { mapStateToProps, mapDispatchToProps } from './constants/mappers'\nimport * as lifecycle from './functions/lifecycle'\nimport { languageHandler, languageObjectHandler } from '../../../../../../functions/language-handler'\nimport * as managers from './functions/managers'\nimport { ManagedPagination, ManagedButton } from 'managed-inputs'\nimport AnnouncementIndexTile from '../tile/tile'\nimport { controlProvider } from './functions/control-provider'\nimport './styles/styles.scss'\nimport { buttonProvider } from './functions/button-provider'\nimport { triggerVisible } from './functions/trigger-visible'\nimport { extend } from './functions/extend'\nimport { destroy } from './functions/destroy'\nimport { edit } from './functions/edit'\nimport { pageHeaderProvider, sectionHeaderProvider } from '../../../../../../functions/header-providers'\nimport { changeRoute } from '../../../../../../functions/routers'\n\nclass AnnouncementIndexList extends React.Component {\n  constructor(props) {\n    super(props)\n    this.languageHandler = languageHandler.bind(this)\n    this.languageObjectHandler = languageObjectHandler.bind(this)\n    this.componentDidMount = lifecycle.componentDidMount\n    this.componentDidUpdate = lifecycle.componentDidUpdate\n    this.componentWillUnmount = lifecycle.componentWillUnmount\n    this.controlProvider = controlProvider.bind(this)\n    this.buttonProvider = buttonProvider.bind(this)\n    this.edit = edit.bind(this)\n    this.triggerVisible = triggerVisible.bind(this)\n    this.destroy = destroy.bind(this)\n    this.pageHeaderProvider = pageHeaderProvider.bind(this)\n    this.sectionHeaderProvider = sectionHeaderProvider.bind(this)\n    this.paginationManager = managers.paginationManager.bind(this)\n    this.destroyManager = managers.destroyManager.bind(this)\n    this.cancelDestroyManager = managers.cancelDestroyManager.bind(this)\n    this.extend = extend.bind(this)\n    this.changeRoute = changeRoute.bind(this)\n  }\n\n  render() {\n\n    return (\n      <div id='announcement-index-list'>\n        {\n        this.props.beingDeleted &&\n        <div className='delete'>\n          <div className='cover' />\n          <div className='monit'>\n            <div className='text'>\n              {\n              this.languageHandler(`Usunięte ogłoszenie nie może być przywrócone. Czy na pewno chcesz usunąć ogłoszenie Nr ${this.props.beingDeleted}. `, `The deleted announcement cannot be restored. Are you sure you want to delete the announcement No. ${this.props.beingDeleted}`)\n              }\n            </div>\n            <ManagedButton {...this.cancelDestroyManager()} />\n            <ManagedButton {...this.destroyManager()} />\n            <div className='float-clear' />\n          </div>\n        </div>\n        }\n        <div className='announcements-amount'>\n          {this.props.amount} {this.languageHandler('Ogłoszenia', 'Announcements')} \n        </div>\n        <div className='pagination-container'>\n          <ManagedPagination {...this.paginationManager()} />\n        </div>\n        <div className='announcements'>\n          {this.props.announcements && this.props.announcements.map((announcement, index) => (\n          <AnnouncementIndexTile\n            key={`${announcement.id}`}\n            index={index}\n            first={index == 0}\n            last={index == this.props.announcements.length - 1}\n            venue='list'\n            announcement={announcement}\n            announcements={this.props.announcements}\n            control={this.controlProvider(announcement, index)}\n            changeAnnouncement={this.props.changeAnnouncement}\n          />))}\n          <div className='float-clear' />\n        </div>\n        <div className='pagination-container bottom'>\n          <ManagedPagination {...this.paginationManager()} />\n        </div>\n      </div>\n    )\n  }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(AnnouncementIndexList)"],"mappings":"AAAA","sourceRoot":""}